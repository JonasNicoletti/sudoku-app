{"version":3,"sources":["models/index.ts","utils/grid-operations.ts","store.ts","components/control-panel/ButtonController.tsx","components/control-panel/game-controller/index.tsx","components/control-panel/size-controller/index.tsx","components/control-panel/timer/index.tsx","components/control-panel/index.tsx","components/game/Cell.tsx","components/game/Row.tsx","components/game/Game.tsx","components/game/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameSize","counter","generateGame","size","grid","Array","fill","map","fillGrid","solvedGrid","deepCopy","attempts","r","getRandom","from","keys","c","backup","copyGrid","solveGrid","row","v","value","isCorrect","isDeletable","numbers","length","_","i","squareSize","Math","sqrt","separators","to","column","floor","shuffle","includes","columnValues","square","rowSep","colSep","push","checkGrid","isGameSolved","a","j","random","array","target","cp","forEach","n","Object","k","INITIAL_SIZE","normal","INITIAL_SOLVED_GRID","INITIAL_GRID","createGrid","set","get","setGrid","getCell","setCell","numberGrid","isValidValue","gameOver","isRunning","isOver","useStore","create","setSize","createSize","setIsRunning","isNew","setIsNew","hint","loop","rowIndex","columnIndex","cell","createController","ButtonController","displayName","onClick","isActive","disabled","type","className","GameController","SizeController","small","Timer","useStopwatch","autoStart","seconds","minutes","pause","reset","useEffect","ControlPanel","customStyles","content","top","left","right","bottom","marginRight","transform","display","justifyContent","flexWrap","getReadableValue","Cell","hasBorder","Modal","setAppElement","state","useState","setIsActive","dial","index","isOpen","onAfterClose","style","d","isSection","Row","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31211309.chunk.js","sourcesContent":["export enum GameSize {\n  small = 4,\n  normal = 9,\n  //FIXME: NOT PERFORMANT ENOUGH\n  // large = 16, \n}\n\nexport interface CellModel {\n  value: number\n  isDeletable: boolean\n  isCorrect: boolean\n}\n\nexport interface GameModel {\n  solvedGrid: number[][]\n  grid: CellModel[][]\n}","import { CellModel, GameModel, GameSize } from \"../models\";\n\ntype SquareRange = {\n  from: number,\n  to: number\n}\n\nlet counter = 0;\n\n\nfunction generateGame(size: GameSize): GameModel {\n  const grid = new Array(size)\n    .fill(0)\n    .map(() => new Array(size).fill(0));\n\n  fillGrid(size, grid);\n  const solvedGrid = deepCopy(grid)\n  let attempts = 0;\n  while (attempts < 5) {\n    let r = getRandom(Array.from(Array(size).keys()))\n    let c = getRandom(Array.from(Array(size).keys()))\n    while (grid[r][c] === 0) {\n      r = getRandom(Array.from(Array(size).keys()))\n      c = getRandom(Array.from(Array(size).keys()))\n    }\n    const backup = grid[r][c]\n    grid[r][c] = 0\n\n    const copyGrid = deepCopy(grid)\n    counter = 0\n    solveGrid(size, copyGrid)\n    if (counter !== 1) {\n      grid[r][c] = backup\n      attempts += 1\n    }\n  }\n  return {\n    solvedGrid: solvedGrid,\n    grid: grid.map(row => row.map(v => { return { value: v, isCorrect: v !== 0, isDeletable: v === 0 } as CellModel }))\n  } \n\n}\n\nfunction fillGrid(size: GameSize, grid: number[][]): boolean | void {\n  let numbers = Array.from({ length: size }, (_, i) => i + 1)\n\n  const squareSize = Math.sqrt(size);\n  const separators: SquareRange[] = Array.from({ length: squareSize }, (_, i) => { return { from: i * squareSize, to: (i + 1) * squareSize } });\n  let row = 0;\n  let column = 0;\n  for (let i = 0; i < size * size; i++) {\n    row = Math.floor(i / size);\n    column = i % size;\n\n    if (grid[row][column] === 0) {\n      numbers = shuffle(numbers);\n      for (const value of numbers) {\n        // check if value fits row\n        if (!grid[row].includes(value)) {\n          // eslint-disable-next-line no-loop-func\n          const columnValues = grid.map((r) => r[column]);\n          // check if value fits column\n          if (!columnValues.includes(value)) {\n            // check if value fits square\n            const square: number[] = [];\n\n            for (const rowSep of separators) {\n              if (row >= rowSep.from && row < rowSep.to) {\n                for (const colSep of separators) {\n                  if (column >= colSep.from && column < colSep.to) {\n                    for (let r = rowSep.from; r < rowSep.to; r++) {\n                      for (let c = colSep.from; c < colSep.to; c++) {\n                        square.push(grid[r][c])\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (!square.includes(value)) {\n              grid[row][column] = value\n              if (checkGrid(grid)) {\n                return true\n              } else {\n                if (fillGrid(size, grid)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n      break;\n    }\n  }\n  grid[row][column] = 0\n}\n\nfunction solveGrid(size: GameSize, grid: number[][]): boolean | void {\n  let numbers = Array.from({ length: size }, (_, i) => i + 1)\n\n  const squareSize = Math.sqrt(size);\n  const separators: SquareRange[] = Array.from({ length: squareSize }, (_, i) => { return { from: i * squareSize, to: (i + 1) * squareSize } });\n  let row = 0;\n  let column = 0;\n  for (let i = 0; i < size * size; i++) {\n    row = Math.floor(i / size);\n    column = i % size;\n\n    if (grid[row][column] === 0) {\n      for (const value of numbers) {\n        // check if value fits row\n        if (!grid[row].includes(value)) {\n          // eslint-disable-next-line no-loop-func\n          const columnValues = grid.map((r) => r[column]);\n          // check if value fits column\n          if (!columnValues.includes(value)) {\n            // check if value fits square\n            const square: number[] = [];\n\n            for (const rowSep of separators) {\n              if (row >= rowSep.from && row < rowSep.to) {\n                for (const colSep of separators) {\n                  if (column >= colSep.from && column < colSep.to) {\n                    for (let r = rowSep.from; r < rowSep.to; r++) {\n                      for (let c = colSep.from; c < colSep.to; c++) {\n                        square.push(grid[r][c])\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (!square.includes(value)) {\n              grid[row][column] = value\n              if (checkGrid(grid)) {\n                counter += 1;\n                break;\n              } else {\n                if (solveGrid(size, grid)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n      break;\n    }\n  }\n  grid[row][column] = 0\n\n}\n\nfunction checkGrid(grid: number[][]) {\n  for (let row = 0; row < grid.length; row++) {\n    for (let column = 0; column < grid[row].length; column++) {\n      if (grid[row][column] === 0) {\n        return false;\n      }\n\n    }\n  }\n  return true;\n}\n\nfunction isGameSolved(grid: CellModel[][]): boolean {\n  for (const row of grid) {\n    for (const value of row) {\n      if (!value.isCorrect || value.value === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\n\n\nfunction isValidValue(grid: number[][], row: number, column: number, value: number, size: GameSize): boolean {\n  const squareSize = Math.sqrt(size);\n  const separators: SquareRange[] = Array.from({ length: squareSize }, (_, i) => { return { from: i * squareSize, to: (i + 1) * squareSize } });\n  if (!grid[row].includes(value)) {\n    const columnValues = grid.map((r) => r[column]);\n    // check if value fits column\n    if (!columnValues.includes(value)) {\n      // check if value fits square\n      const square: number[] = [];\n\n      for (const rowSep of separators) {\n        if (row >= rowSep.from && row < rowSep.to) {\n          for (const colSep of separators) {\n            if (column >= colSep.from && column < colSep.to) {\n              for (let r = rowSep.from; r < rowSep.to; r++) {\n                for (let c = colSep.from; c < colSep.to; c++) {\n                  square.push(grid[r][c])\n                }\n              }\n            }\n          }\n        }\n      }\n      if (!square.includes(value)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction shuffle(a: Array<number>) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction getRandom(array: Array<number>): number {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const deepCopy = <T>(target: T): T => {\n  if (target === null) {\n    return target;\n  }\n  if (target instanceof Array) {\n    const cp = [] as any[];\n    (target as any[]).forEach((v) => { cp.push(v); });\n    return cp.map((n: any) => deepCopy<any>(n)) as any;\n  }\n  if (typeof target === 'object' && target !== {}) {\n    const cp = { ...(target as { [key: string]: any }) } as { [key: string]: any };\n    Object.keys(cp).forEach(k => {\n      cp[k] = deepCopy<any>(cp[k]);\n    });\n    return cp as T;\n  }\n  return target;\n};\n\nexport { generateGame, isValidValue, isGameSolved }","import create from \"zustand\"\nimport { mountStoreDevtool } from 'simple-zustand-devtools';\nimport { GetState, SetState } from \"zustand\";\n\nimport { CellModel, GameSize } from \"./models\"\nimport { generateGame, isValidValue, isGameSolved } from \"./utils/grid-operations\";\n\nconst INITIAL_SIZE = GameSize.normal\nconst { solvedGrid: INITIAL_SOLVED_GRID, grid: INITIAL_GRID } = generateGame(INITIAL_SIZE)\n\ninterface SizeState {\n  size: GameSize;\n  setSize: (size: GameSize) => void;\n}\nconst createSize = (set: SetState<GameState>, get: GetState<GameState>) => ({\n  size: INITIAL_SIZE,\n  setSize: (size: GameSize) => {\n    const { solvedGrid, grid } = generateGame(size);\n    set({\n      solvedGrid: solvedGrid,\n      grid: grid,\n      size: size,\n    })\n  },\n});\n\ninterface GridState {\n  solvedGrid: number[][];\n  grid: CellModel[][];\n  setGrid: (size: GameSize) => void;\n  getCell: (row: number, column: number) => CellModel;\n  setCell: (row: number, column: number, value: number) => boolean;\n}\n\nconst createGrid = (set: SetState<GameState>, get: GetState<GameState>) => ({\n  solvedGrid: INITIAL_SOLVED_GRID,\n  grid: INITIAL_GRID,\n  setGrid: (size: GameSize) => {\n    const { solvedGrid, grid } = generateGame(size);\n    set(() => ({\n      solvedGrid: solvedGrid,\n      grid: grid\n    }))\n  },\n  getCell: (row: number, column: number) => {\n    return get().grid[row][column]\n  },\n  setCell: (row: number, column: number, value: number) => {\n    const isSolvable = true;\n    const grid = get().grid\n    const size = get().size;\n    const numberGrid = grid.map(r => r.map(v => v.value));\n    grid[row][column].isCorrect = isValidValue(numberGrid, row, column, value, size);\n    grid[row][column].value = value\n    const gameOver = isGameSolved(grid)\n    set({\n      grid: grid,\n      isRunning: !gameOver,\n      isOver: gameOver\n    })\n    return isSolvable;\n  }\n})\n\ninterface ControllerState {\n  isOver: boolean;\n  isRunning: boolean;\n  setIsRunning: (isRunning: boolean) => void;\n  isNew: boolean;\n  setIsNew: (isNew: boolean) => void;\n  hint: () => void;\n}\n\nconst createController = (set: SetState<GameState>, get: GetState<GameState>) => ({\n  isOver: false,\n  isRunning: false,\n  setIsRunning: (isRunning: boolean) => set({ isRunning: isRunning }),\n  isNew: true,\n  setIsNew: (isNew: boolean) => {\n    if (isNew) {\n      const { solvedGrid, grid } = generateGame(get().size);\n      set({\n        solvedGrid: solvedGrid,\n        grid: grid\n      })\n    }\n    set({\n      isNew: isNew\n    })\n  },\n  hint: () => {\n    const { solvedGrid, grid } = get();\n    loop:\n    for (let rowIndex = 0; rowIndex < grid.length; rowIndex++) {\n      const column = grid[rowIndex];\n      for (let columnIndex = 0; columnIndex < column.length; columnIndex++) {\n        const cell = column[columnIndex];\n        if (cell.value === 0) {\n          cell.value = solvedGrid[rowIndex][columnIndex];\n          cell.isCorrect = true\n          break loop;\n        }\n      }\n    }\n    const isOver = isGameSolved(grid)\n    set({\n      grid: grid,\n      isOver: isOver,\n      isRunning: !isOver,\n    })\n  }\n})\n\nexport type GameState = SizeState & GridState & ControllerState;\n\nconst useStore = create<GameState>((set, get) => ({\n  ...createSize(set, get),\n  ...createGrid(set, get),\n  ...createController(set, get),\n}));\n\nif (process.env.NODE_ENV === 'development') {\n  mountStoreDevtool('Store', useStore as any);\n}\nexport default useStore","function ButtonController({\n  displayName,\n  onClick,\n  isActive,\n  disabled,\n}: {\n  displayName: string;\n  onClick: () => void;\n  isActive: boolean;\n  disabled?: boolean;\n}) {\n  return (\n    <input\n      type=\"button\"\n      className={`button-controller-button ${isActive ? \"border\" : \"\"}`}\n      value={displayName}\n      onClick={() => onClick()}\n      disabled={disabled}\n    />\n  );\n}\nexport default ButtonController;\n","import useStore from \"../../../store\";\nimport ButtonController from \"../ButtonController\";\n\nfunction GameController() {\n  const { isRunning, setIsRunning, isNew, setIsNew, hint } = useStore();\n\n  return (\n    <>\n      <ButtonController\n        displayName=\"Start\"\n        onClick={() => {\n          setIsRunning(true);\n          setIsNew(false);\n        }}\n        isActive={false}\n        disabled={isRunning}\n      />\n      <ButtonController\n        displayName=\"New\"\n        onClick={() => {\n          setIsRunning(false);\n          setIsNew(true);\n        }}\n        isActive={false}\n        disabled={isNew}\n      />\n      <ButtonController\n        displayName=\"Hint\"\n        onClick={() => hint()}\n        isActive={false}\n      />\n    </>\n  );\n}\n\nexport default GameController;\n","import { GameSize } from \"../../../models\";\nimport useStore from \"../../../store\";\nimport ButtonController from \"../ButtonController\";\n\nfunction SizeController() {\n  const { size, setSize, isRunning } = useStore();\n\n  return (\n    <div className=\"size-controller\">\n      <ButtonController\n        displayName={GameSize[GameSize.small]}\n        onClick={() => setSize(GameSize.small)}\n        isActive={size === GameSize.small}\n        disabled={isRunning}\n      />\n      <ButtonController\n        displayName={GameSize[GameSize.normal]}\n        onClick={() => setSize(GameSize.normal)}\n        isActive={size === GameSize.normal}\n        disabled={isRunning}\n      />\n      {/* <SizeButton displaySize={GameSize.large} /> */}\n    </div>\n  );\n}\n\nexport default SizeController;\n","import { useEffect } from \"react\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport useStore from \"../../../store\";\n\nfunction Timer() {\n  const { isRunning } = useStore();\n  const { seconds, minutes, pause, reset } = useStopwatch({\n    autoStart: false,\n  });\n\n  useEffect(() => {\n    if (isRunning) {\n      reset();\n    } else {\n      pause();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isRunning]);\n  return (\n    <div className=\"clock\">\n      <div className=\"minutes\">\n        <div className=\"first\">\n          <div className=\"number\">{Math.floor(minutes / 10)}</div>\n        </div>\n        <div className=\"second\">\n          <div className=\"number\">{minutes % 10}</div>\n        </div>\n      </div>\n      <div className=\"tick\">:</div>\n      <div className=\"seconds\">\n        <div className=\"first\">\n          <div className=\"number\">{Math.floor(seconds / 10)}</div>\n        </div>\n        <div className=\"second infinite\">\n          <div className=\"number\">{seconds % 10}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import GameController from \"./game-controller\";\nimport SizeController from \"./size-controller\";\nimport Timer from \"./timer\";\n\nfunction ControlPanel() {\n  return (\n    <div className=\"control-panel\">\n      <div className=\"control-panel-header\">\n        <h2>Control Panel</h2>\n        <Timer />\n      </div>\n      <GameController />\n      <SizeController />\n    </div>\n  );\n}\n\nexport default ControlPanel;\n","import { useState } from \"react\";\nimport useStore from \"../../store\";\nimport Modal from \"react-modal\";\nimport { CSSProperties } from \"react\";\ntype CellProps = {\n  hasBorder: boolean;\n  row: number;\n  column: number;\n};\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    flexWrap: \"wrap\",\n  } as CSSProperties, // due flexWrap is not a valid type of Modal.Styles\n};\n\nconst getReadableValue = (value: number) => {\n  return value === 0 ? \"\" : value;\n};\n\nfunction Cell({ row, column, hasBorder }: CellProps) {\n  Modal.setAppElement(\"#root\");\n  const { getCell, setCell, size, isNew } = useStore((state) => state);\n  const [isActive, setIsActive] = useState(false);\n  const { value, isDeletable } = getCell(row, column);\n  const dial = [];\n\n  for (let index = 0; index < size + 1; index++) {\n    dial.push(\n      <div\n        className=\"value-input\"\n        key={index}\n        onClick={() => {\n          setCell(row, column, index);\n        }}\n      >\n        {index === 0 ? \"-\" : index}\n      </div>\n    );\n  }\n  return (\n    <div\n      className={`cell ${hasBorder ? \"border\" : \"\"} ${\n        isActive ? \"active\" : \"\"\n      } ${isDeletable ? \"\" : \"fix\"}`}\n      onClick={() => setIsActive(isDeletable && !isActive)}\n    >\n      <span className={isNew ? \"blur\" : \"\"}>{getReadableValue(value)}</span>\n      <Modal\n        isOpen={isActive}\n        onAfterClose={() => setIsActive(false)}\n        style={customStyles}\n      >\n        {dial.map((d) => d)}\n      </Modal>\n    </div>\n  );\n}\n\nexport default Cell;\n","import Cell from \"./Cell\";\n\ntype RowProps = {\n  index: number;\n  size: number;\n};\n\nfunction Row({ index, size }: RowProps) {\n  const row = [];\n  for (let columnIndex = 0; columnIndex < size; columnIndex++) {\n    const cell = (\n      <Cell\n        key={columnIndex}\n        hasBorder={isSection(columnIndex, size)}\n        row={index}\n        column={columnIndex}\n      />\n    );\n    row.push(cell);\n  }\n  return (\n    <div className={isSection(index, size) ? \"row border\" : \"row\"}>\n      {row.map((c) => c)}\n    </div>\n  );\n}\n\nfunction isSection(index: number, size: number) {\n  return (index + 1) % Math.sqrt(size) === 0;\n}\n\nexport default Row;\n","import useStore from \"../../store\";\nimport Row from \"./Row\";\n\nfunction Game() {\n  const size = useStore((state) => state.size);\n\n  const grid = [];\n\n  for (let rowIndex = 0; rowIndex < size; rowIndex++) {\n    grid.push(<Row key={rowIndex} index={rowIndex} size={size} />);\n  }\n  return <div className=\"grid\">{grid.map((row) => row)}</div>;\n}\n\nexport default Game;\n","import Game from \"./Game\";\n\nexport default Game","import ControlPanel from \"./components/control-panel\";\nimport Game from \"./components/game\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game />\n      <ControlPanel />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}