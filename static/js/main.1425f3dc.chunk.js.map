{"version":3,"sources":["models/index.ts","utils/game-generator.ts","store.ts","components/control-panel/size-controller/SizeButton.tsx","components/control-panel/size-controller/index.tsx","components/control-panel/index.tsx","components/game/Cell.tsx","components/game/Row.tsx","components/game/Game.tsx","components/game/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameSize","counter","generateGame","size","grid","Array","fill","map","fillGrid","attempts","r","getRandom","from","keys","c","backup","copyGrid","solveGrid","numbers","length","_","i","squareSize","Math","sqrt","separators","to","row","column","floor","shuffle","value","includes","columnValues","square","rowSep","colSep","push","checkGrid","a","j","random","array","useStore","create","set","get","normal","setSize","createSize","setGrid","getCell","createGrid","SizeButton","displaySize","id","type","className","onClick","SizeController","small","large","ControlPanel","Cell","hasBorder","isSection","index","Row","state","columnIndex","cell","Game","rowIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1425f3dc.chunk.js","sourcesContent":["export enum GameSize {\n  small = 4,\n  normal = 9,\n  large = 16,\n}","import { GameSize } from \"../models\";\n\ntype SquareRange = {\n  from: number,\n  to: number\n}\n\nlet counter = 0;\n\n\nfunction generateGame(size: GameSize): number[][] {\n  const grid = new Array(size)\n    .fill(0)\n    .map(() => new Array(size).fill(0));\n\n  fillGrid(size, grid);\n  let attempts = 0;\n  while (attempts < 5) {\n    let r = getRandom(Array.from(Array(size).keys()))\n    let c = getRandom(Array.from(Array(size).keys()))\n    while (grid[r][c] === 0) {\n      r = getRandom(Array.from(Array(size).keys()))\n      c = getRandom(Array.from(Array(size).keys()))\n    }\n    const backup = grid[r][c]\n    grid[r][c] = 0\n\n    const copyGrid = [...grid]\n    counter = 0\n    solveGrid(size, copyGrid)\n    if (counter !== 1) {\n      grid[r][c] = backup\n      attempts += 1\n    }\n  }\n\n  return grid;\n\n}\n\nfunction fillGrid(size: GameSize, grid: number[][]): boolean | void {\n  let numbers = Array.from({ length: size }, (_, i) => i + 1)\n\n  const squareSize = Math.sqrt(size);\n  const separators: SquareRange[] = Array.from({ length: squareSize }, (_, i) => { return { from: i * squareSize, to: (i + 1) * squareSize } });\n  let row = 0;\n  let column = 0;\n  for (let i = 0; i < size * size; i++) {\n    row = Math.floor(i / size);\n    column = i % size;\n\n    if (grid[row][column] === 0) {\n      numbers = shuffle(numbers);\n      for (const value of numbers) {\n        // check if value fits row\n        if (!grid[row].includes(value)) {\n          // eslint-disable-next-line no-loop-func\n          const columnValues = grid.map((r) => r[column]);\n          // check if value fits column\n          if (!columnValues.includes(value)) {\n            // check if value fits square\n            const square: number[] = [];\n\n            for (const rowSep of separators) {\n              if (row >= rowSep.from && row < rowSep.to) {\n                for (const colSep of separators) {\n                  if (column >= colSep.from && column < colSep.to) {\n                    for (let r = rowSep.from; r < rowSep.to; r++) {\n                      for (let c = colSep.from; c < colSep.to; c++) {\n                        square.push(grid[r][c])\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (!square.includes(value)) {\n              grid[row][column] = value\n              if (checkGrid(grid)) {\n                return true\n              } else {\n                if (fillGrid(size, grid)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n      break;\n    }\n  }\n  grid[row][column] = 0\n}\n\nfunction solveGrid(size: GameSize, grid: number[][]): boolean | void {\n  let numbers = Array.from({ length: size }, (_, i) => i + 1)\n\n  const squareSize = Math.sqrt(size);\n  const separators: SquareRange[] = Array.from({ length: squareSize }, (_, i) => { return { from: i * squareSize, to: (i + 1) * squareSize } });\n  let row = 0;\n  let column = 0;\n  for (let i = 0; i < size * size; i++) {\n    row = Math.floor(i / size);\n    column = i % size;\n\n    if (grid[row][column] === 0) {\n      for (const value of numbers) {\n        // check if value fits row\n        if (!grid[row].includes(value)) {\n          // eslint-disable-next-line no-loop-func\n          const columnValues = grid.map((r) => r[column]);\n          // check if value fits column\n          if (!columnValues.includes(value)) {\n            // check if value fits square\n            const square: number[] = [];\n\n            for (const rowSep of separators) {\n              if (row >= rowSep.from && row < rowSep.to) {\n                for (const colSep of separators) {\n                  if (column >= colSep.from && column < colSep.to) {\n                    for (let r = rowSep.from; r < rowSep.to; r++) {\n                      for (let c = colSep.from; c < colSep.to; c++) {\n                        square.push(grid[r][c])\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (!square.includes(value)) {\n              grid[row][column] = value\n              if (checkGrid(grid)) {\n                counter += 1;\n                break;\n              } else {\n                if (solveGrid(size, grid)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n      break;\n    }\n  }\n  grid[row][column] = 0\n\n}\n\nfunction checkGrid(grid: number[][]) {\n  for (let row = 0; row < grid.length; row++) {\n    for (let column = 0; column < grid[row].length; column++) {\n      if (grid[row][column] === 0) {\n        return false;\n      }\n\n    }\n  }\n  return true;\n}\n\nfunction shuffle(a: Array<number>) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction getRandom(array: Array<number>): number {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n\nexport { generateGame }","import create from \"zustand\"\nimport { GetState, SetState } from \"zustand\";\n\nimport { GameSize } from \"./models\"\nimport { generateGame } from \"./utils/game-generator\";\n\ninterface SizeState {\n  size: GameSize;\n  setSize: (size: GameSize) => void;\n}\nconst createSize = (set: SetState<GameState>, get: GetState<GameState>) => ({\n  size: GameSize.normal,\n  setSize: (size: GameSize) => set(() => ({\n    size: size, grid: generateGame(size,)\n  })),\n});\n\ninterface GridState {\n  grid: number[][]\n  setGrid: (size: GameSize) => void;\n  getCell: (row: number, column: number) => number;\n}\n\nconst createGrid = (set: SetState<GameState>, get: GetState<GameState>) => ({\n  grid: generateGame(GameSize.normal),\n  setGrid: (size: GameSize) => set(() => ({\n    grid: generateGame(size)\n  })),\n  getCell: (row: number, column: number) => {\n    return get().grid[row][column]\n  }\n})\n\n\n\nexport type GameState = SizeState & GridState;\n\nconst useStore = create<GameState>((set, get) => ({\n  ...createSize(set, get),\n  ...createGrid(set, get)\n}));\n\n\nexport default useStore","import { GameSize } from \"../../../models\";\nimport useStore from \"../../../store\";\n\nfunction SizeButton({ displaySize }: { displaySize: GameSize }) {\n  const { size, setSize } = useStore();\n\n  return (\n    <input\n      id=\"size\"\n      type=\"button\"\n      className={\n        size === displaySize\n          ? `size-controller-button border`\n          : `size-controller-button`\n      }\n      value={GameSize[displaySize]}\n      onClick={() => setSize(displaySize)}\n    />\n  );\n}\n\nexport default SizeButton;\n","import { GameSize } from \"../../../models\";\nimport SizeButton from \"./SizeButton\";\n\nfunction SizeController() {\n  return (\n    <div className=\"size-controller\">\n      <h3>Size</h3>\n      <SizeButton displaySize={GameSize.small} />\n      <SizeButton displaySize={GameSize.normal} />\n      <SizeButton displaySize={GameSize.large} />\n    </div>\n  );\n}\n\nexport default SizeController;\n","import SizeController from \"./size-controller\";\n\nfunction ControlPanel() {\n  return (\n    <div className=\"control-panel\">\n      <h2>Control Panel</h2>\n      <SizeController />\n    </div>\n  );\n}\n\nexport default ControlPanel;\n","type CellProps = {\n  value: number;\n  hasBorder: boolean;\n};\n\nfunction Cell({ value, hasBorder }: CellProps) {\n  return (\n    <div className={hasBorder ? \"cell border\" : \"cell\"}>\n      {value === 0 ? \"\" : value}\n    </div>\n  );\n}\n\nexport default Cell;\n","import useStore from \"../../store\";\nimport Cell from \"./Cell\";\n\ntype RowProps = {\n  index: number;\n  size: number;\n};\n\nfunction Row({ index, size }: RowProps) {\n  const { getCell } = useStore((state) => state);\n  const row = [];\n  for (let columnIndex = 0; columnIndex < size; columnIndex++) {\n    const cell = (\n      <Cell\n        key={columnIndex}\n        value={getCell(index, columnIndex)}\n        hasBorder={isSection(columnIndex, size)}\n      />\n    );\n    row.push(cell);\n  }\n  return (\n    <div className={isSection(index, size) ? \"row border\" : \"row\"}>\n      {row.map((c) => c)}\n    </div>\n  );\n}\n\nfunction isSection(index: number, size: number) {\n  return (index + 1) % Math.sqrt(size) === 0;\n}\n\nexport default Row;\n","import useStore from \"../../store\";\nimport Row from \"./Row\";\n\nfunction Game() {\n  const size = useStore((state) => state.size);\n\n  const grid = [];\n\n  for (let rowIndex = 0; rowIndex < size; rowIndex++) {\n    grid.push(<Row key={rowIndex} index={rowIndex} size={size} />);\n  }\n  return <div className=\"grid\">{grid.map((row) => row)}</div>;\n}\n\nexport default Game;\n","import Game from \"./Game\";\n\nexport default Game","import ControlPanel from \"./components/control-panel\";\nimport Game from \"./components/game\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game />\n      <ControlPanel />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}