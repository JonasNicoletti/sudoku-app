{"version":3,"sources":["models/index.ts","utils/grid-operations.ts","store.ts","components/common/ButtonController.tsx","components/control-panel/game-controller/index.tsx","components/control-panel/size-controller/index.tsx","components/control-panel/timer/index.tsx","components/control-panel/index.tsx","utils/timeutils.ts","components/upload-record/index.tsx","components/game/Cell.tsx","components/game/Row.tsx","components/game/Game.tsx","components/game/index.ts","components/leaderboard/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameSize","GameState","gridToGameModel","grid","map","row","v","value","isCorrect","isDeletable","isGameSolved","axiosClient","axios","create","baseURL","process","REACT_APP_BACKEND_URI","INITIAL_SIZE","normal","size","Array","fill","solvedGrid","getEmptyGrid","INITIAL_SOLVED_GRID","INITIAL_GRID","createGrid","set","get","gameId","undefined","records","setGrid","id","state","NEW","getCell","column","setCell","numberGrid","r","squareSize","Math","sqrt","separators","from","length","_","i","to","includes","columnValues","square","rowSep","colSep","c","push","isValidValue","gameOver","FINISHED","useStore","setSize","createSize","EMPTY","time","hints","setState","a","data","hint","loop","rowIndex","columnIndex","cell","isOver","setTime","addRecord","record","concat","createController","CustomButton","displayName","onClick","isActive","disabled","type","className","GameController","RUNNING","STOPPED","FETCHING","SizeController","small","Timer","useStopwatch","autoStart","seconds","minutes","pause","reset","useEffect","floor","ControlPanel","store","toTime","score","Date","toISOString","substr","UploadRecord","useState","userName","setUserName","uploadRecord","useMutation","post","onSuccess","onChange","e","target","placeholder","mutate","customStyles","content","top","left","right","bottom","marginRight","transform","display","justifyContent","flexWrap","getReadableValue","Cell","hasBorder","Modal","setAppElement","setIsActive","dial","index","isOpen","onAfterClose","style","d","isSection","Row","cellGrid","Game","urlId","useParams","gameGrid","validateStatus","status","fetchGame","LeaderBoard","App","queryClient","QueryClient","client","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7540232.chunk.js","sourcesContent":["export enum GameSize {\n  small = 4,\n  normal = 9,\n  //FIXME: NOT PERFORMANT ENOUGH\n  // large = 16,\n}\n\nexport interface CellModel {\n  value: number\n  isDeletable: boolean\n  isCorrect: boolean\n}\nexport interface GameDto {\n  id: string;\n  size: number;\n  solvedGrid: number[][];\n  grid: number[][];\n  records: RecordDto[];\n}\n\nexport interface RecordDto {\n  userName: string\n  gameId: string\n  score: number\n}\n\nexport enum GameState {\n  EMPTY,\n  RUNNING,\n  STOPPED,\n  NEW,\n  FETCHING,\n  FINISHED\n}\n\nexport interface GameModel {\n  solvedGrid: number[][]\n  grid: CellModel[][]\n}","import { CellModel, GameModel, GameSize } from \"../models\";\n\ntype SquareRange = {\n  from: number,\n  to: number\n}\n\nfunction gridToGameModel(grid: number[][]): CellModel[][] {\n  return grid.map(row => row.map(v => { return { value: v, isCorrect: v !== 0, isDeletable: v === 0 } as CellModel }))\n}\n\n\nfunction getEmptyGrid(size: GameSize): GameModel {\n  const grid: number[][] = new Array(size)\n    .fill(0)\n    .map(() => new Array(size).fill(0));\n  return {\n    solvedGrid: grid,\n    grid: gridToGameModel(grid)\n  }\n\n}\n\nfunction isGameSolved(grid: CellModel[][]): boolean {\n  for (const row of grid) {\n    for (const value of row) {\n      if (!value.isCorrect || value.value === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\nfunction isValidValue(grid: number[][], row: number, column: number, value: number, size: GameSize): boolean {\n  const squareSize = Math.sqrt(size);\n  const separators: SquareRange[] = Array.from({ length: squareSize }, (_, i) => { return { from: i * squareSize, to: (i + 1) * squareSize } });\n  if (!grid[row].includes(value)) {\n    const columnValues = grid.map((r) => r[column]);\n    // check if value fits column\n    if (!columnValues.includes(value)) {\n      // check if value fits square\n      const square: number[] = [];\n\n      for (const rowSep of separators) {\n        if (row >= rowSep.from && row < rowSep.to) {\n          for (const colSep of separators) {\n            if (column >= colSep.from && column < colSep.to) {\n              for (let r = rowSep.from; r < rowSep.to; r++) {\n                for (let c = colSep.from; c < colSep.to; c++) {\n                  square.push(grid[r][c])\n                }\n              }\n            }\n          }\n        }\n      }\n      if (!square.includes(value)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport const deepCopy = <T>(target: T): T => {\n  if (target === null) {\n    return target;\n  }\n  if (target instanceof Array) {\n    const cp = [] as any[];\n    (target as any[]).forEach((v) => { cp.push(v); });\n    return cp.map((n: any) => deepCopy<any>(n)) as any;\n  }\n  if (typeof target === 'object' && target !== {}) {\n    const cp = { ...(target as { [key: string]: any }) } as { [key: string]: any };\n    Object.keys(cp).forEach(k => {\n      cp[k] = deepCopy<any>(cp[k]);\n    });\n    return cp as T;\n  }\n  return target;\n};\n\nexport { isValidValue, isGameSolved, getEmptyGrid, gridToGameModel }","import create from \"zustand\"\nimport { mountStoreDevtool } from 'simple-zustand-devtools';\nimport { GetState, SetState } from \"zustand\";\n\nimport { CellModel, GameDto, GameSize, GameState, RecordDto } from \"./models\"\nimport { isValidValue, isGameSolved, getEmptyGrid, gridToGameModel } from \"./utils/grid-operations\";\nimport axios from \"axios\";\n\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URI,\n});\n\nconst INITIAL_SIZE = GameSize.normal\nconst { solvedGrid: INITIAL_SOLVED_GRID, grid: INITIAL_GRID } = getEmptyGrid(INITIAL_SIZE)\n\ninterface SizeState {\n  size: GameSize;\n  setSize: (size: GameSize) => void;\n}\nconst createSize = (set: SetState<State>, get: GetState<State>) => ({\n  size: INITIAL_SIZE,\n  setSize: (size: GameSize) => {\n    set({\n      size: size,\n    })\n  },\n});\n\ninterface GridState {\n  solvedGrid: number[][];\n  grid: CellModel[][];\n  gameId: string | undefined;\n  records: RecordDto[];\n  setGrid: (dto: GameDto) => void;\n  getCell: (row: number, column: number) => CellModel;\n  setCell: (row: number, column: number, value: number) => void;\n}\n\nconst createGrid = (set: SetState<State>, get: GetState<State>) => ({\n  solvedGrid: INITIAL_SOLVED_GRID,\n  grid: INITIAL_GRID,\n  gameId: undefined,\n  records: [],\n  setGrid: ({ grid, solvedGrid, id, size, records }: GameDto) => {\n    set(() => ({\n      solvedGrid: solvedGrid,\n      grid: gridToGameModel(grid),\n      gameId: id,\n      records: records,\n      state: GameState.NEW,\n      size: size\n    }))\n  },\n  getCell: (row: number, column: number) => {\n    return get().grid[row][column]\n  },\n  setCell: (row: number, column: number, value: number) => {\n    const grid = get().grid\n    const size = get().size;\n    const numberGrid = grid.map(r => r.map(v => v.value));\n    grid[row][column].isCorrect = isValidValue(numberGrid, row, column, value, size);\n    grid[row][column].value = value\n    const gameOver = isGameSolved(grid)\n    if (gameOver) {\n      set({\n        state: GameState.FINISHED,\n        grid: grid\n      })\n    } else {\n      set({\n        grid: grid,\n      })\n    }\n  }\n})\n\ninterface ControllerState {\n  state: GameState;\n  time: number;\n  hints: number;\n  setState: (state: GameState, gameId?: string) => void;\n  hint: () => void;\n  setTime: (time: number) => void;\n  addRecord: (record: RecordDto) => void;\n}\n\nconst createController = (set: SetState<State>, get: GetState<State>) => ({\n  state: GameState.EMPTY,\n  time: 0,\n  hints: 0,\n  setState: async (state: GameState, gameId?: string) => {\n    if (state === GameState.NEW) {\n      if (gameId) {\n        const { data: { records }, } = await axiosClient.get<GameDto>(`/games/${gameId}`)\n        set({\n          state: state,\n          records: records,\n          hints: 0,\n        })\n\n      } else {\n        const { data: { grid, id, solvedGrid, size, records }, } = await axiosClient.get<GameDto>(`/games/random/${get().size}`)\n        set({\n          state: state,\n          grid: gridToGameModel(grid),\n          solvedGrid: solvedGrid,\n          size: size,\n          gameId: id,\n          records: records,\n          hints: 0,\n        })\n\n      }\n\n    } else {\n      set({\n        state: state\n      })\n    }\n  },\n  hint: () => {\n    const { solvedGrid, grid } = get();\n    loop:\n    for (let rowIndex = 0; rowIndex < grid.length; rowIndex++) {\n      const column = grid[rowIndex];\n      for (let columnIndex = 0; columnIndex < column.length; columnIndex++) {\n        const cell = column[columnIndex];\n        if (cell.value === 0) {\n          cell.value = solvedGrid[rowIndex][columnIndex];\n          cell.isCorrect = true\n          break loop;\n        }\n      }\n    }\n    const isOver = isGameSolved(grid)\n    if (isOver) {\n      set({\n        state: GameState.FINISHED,\n        grid: grid,\n        hints: get().hints + 1\n      })\n    } else {\n      set({\n        grid: grid,\n        hints: get().hints + 1\n      })\n    }\n  },\n  setTime: (time: number) => {\n    set({\n      time: time\n    })\n  },\n  addRecord: (record: RecordDto) => {\n    set({\n      records: get().records.concat(record)\n    })\n  }\n})\n\nexport type State = SizeState & GridState & ControllerState;\n\nconst useStore = create<State>((set, get) => ({\n  ...createSize(set, get),\n  ...createGrid(set, get),\n  ...createController(set, get),\n}));\n\nif (process.env.NODE_ENV === 'development') {\n  mountStoreDevtool('Store', useStore as any);\n}\nexport default useStore","function CustomButton({\n  displayName,\n  onClick,\n  isActive,\n  disabled,\n}: {\n  displayName: string;\n  onClick: () => void;\n  isActive?: boolean;\n  disabled?: boolean;\n}) {\n  return (\n    <input\n      type=\"button\"\n      className={`button-controller-button ${isActive ? \"border\" : \"\"}`}\n      value={displayName}\n      onClick={() => onClick()}\n      disabled={disabled}\n    />\n  );\n}\nexport default CustomButton;\n","import { GameState } from \"../../../models\";\nimport useStore from \"../../../store\";\nimport CustomButton from \"../../common/ButtonController\";\n\nfunction GameController() {\n  const { state, setState, hint } = useStore();\n\n  return (\n    <>\n      <CustomButton\n        displayName={state === GameState.RUNNING ? \"Stop\" : \"Start\"}\n        onClick={() => {\n          if (state !== GameState.RUNNING) {\n            setState(GameState.RUNNING);\n          } else {\n            setState(GameState.STOPPED);\n          }\n        }}\n        isActive={false}\n        disabled={\n          state === GameState.EMPTY ||\n          state === GameState.FETCHING ||\n          state === GameState.FINISHED ||\n          state === GameState.STOPPED\n        }\n      />\n      <CustomButton\n        displayName=\"New Game\"\n        onClick={() => {\n          setState(GameState.NEW);\n        }}\n        isActive={false}\n        disabled={state === GameState.RUNNING}\n      />\n      <CustomButton\n        displayName=\"Hint\"\n        onClick={() => hint()}\n        isActive={false}\n        disabled={state !== GameState.RUNNING}\n      />\n    </>\n  );\n}\n\nexport default GameController;\n","import { GameSize } from \"../../../models\";\nimport useStore from \"../../../store\";\nimport CustomButton from \"../../common/ButtonController\";\n\nfunction SizeController() {\n  const { size, setSize } = useStore();\n\n  return (\n    <div className=\"size-controller\">\n      <CustomButton\n        displayName={GameSize[GameSize.small]}\n        onClick={() => setSize(GameSize.small)}\n        isActive={size === GameSize.small}\n      />\n      <CustomButton\n        displayName={GameSize[GameSize.normal]}\n        onClick={() => setSize(GameSize.normal)}\n        isActive={size === GameSize.normal}\n      />\n      {/* <SizeButton displaySize={GameSize.large} /> */}\n    </div>\n  );\n}\n\nexport default SizeController;\n","import { useEffect } from \"react\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport { GameState } from \"../../../models\";\nimport useStore from \"../../../store\";\n\nfunction Timer() {\n  const { state, setTime, hints } = useStore();\n  const { seconds, minutes, pause, reset } = useStopwatch({\n    autoStart: false,\n  });\n\n  useEffect(() => {\n    if (state === GameState.RUNNING) {\n      reset();\n    } else {\n      pause();\n      setTime(seconds + minutes * 60);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state]);\n  return (\n    <div className=\"clock\">\n      <div className=\"minutes\">\n        <div className=\"first\">\n          <div className=\"number\">{Math.floor(minutes / 10)}</div>\n        </div>\n        <div className=\"second\">\n          <div className=\"number\">{minutes % 10}</div>\n        </div>\n      </div>\n      <div className=\"tick\">:</div>\n      <div className=\"seconds\">\n        <div className=\"first\">\n          <div className=\"number\">{Math.floor(seconds / 10)}</div>\n        </div>\n        <div className=\"second infinite\">\n          <div className=\"number\">{seconds % 10}</div>\n        </div>\n      </div>\n      <div className=\"hint_plus\">+</div>\n      <div className=\"hint_seconds\">\n        <div className=\"first\">\n          <div className=\"number\">{Math.floor((hints * 30) / 10)}</div>\n        </div>\n        <div className=\"second infinite\">\n          <div className=\"number\">{(hints * 30) % 10}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import useStore from \"../../store\";\nimport GameController from \"./game-controller\";\nimport SizeController from \"./size-controller\";\nimport Timer from \"./timer\";\n\nfunction ControlPanel() {\n  const gameId = useStore((store) => store.gameId);\n  return (\n    <div className=\"control-panel\">\n      <div className=\"control-panel-header\">\n        <Timer />\n        <h3>{gameId ? gameId : \"\"}</h3>\n      </div>\n      <GameController />\n      <SizeController />\n    </div>\n  );\n}\n\nexport default ControlPanel;\n","export const toTime = (score: number): string => {\n  return new Date(score * 1000).toISOString().substr(14, 5);\n};","import { useState } from \"react\";\nimport { GameState, RecordDto } from \"../../models\";\nimport useStore from \"../../store\";\nimport CustomButton from \"../common/ButtonController\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { toTime } from \"../../utils/timeutils\";\n\nfunction UploadRecord() {\n  const { setState, time, gameId, hints } = useStore();\n  const [userName, setUserName] = useState<string>(\"\");\n\n  const axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URI,\n  });\n\n  const uploadRecord = useMutation<Response, unknown, RecordDto>(\n    (data) => axiosClient.post(`/records`, data),\n    {\n      onSuccess: () => {\n        setState(GameState.NEW, gameId);\n      },\n    }\n  );\n\n  return (\n    <div>\n      <p>Your total score is: {toTime(time + hints * 60)}</p>\n      <input\n        type=\"text\"\n        onChange={(e) => setUserName(e.target.value)}\n        value={userName}\n        placeholder=\"Insert your username....\"\n      />\n      <CustomButton\n        displayName=\"Don't upload\"\n        onClick={() => setState(GameState.EMPTY)}\n      />\n      <CustomButton\n        displayName=\"Upload\"\n        onClick={() => {\n          const record: RecordDto = {\n            gameId: gameId || \"\",\n            score: time + hints * 60,\n            userName: userName,\n          };\n          uploadRecord.mutate(record);\n        }}\n        disabled={userName?.length === 0}\n      />\n    </div>\n  );\n}\n\nexport default UploadRecord;\n","import { useState } from \"react\";\nimport useStore from \"../../store\";\nimport Modal from \"react-modal\";\nimport { CSSProperties } from \"react\";\nimport { GameState } from \"../../models\";\ntype CellProps = {\n  hasBorder: boolean;\n  row: number;\n  column: number;\n  value: number;\n  isDeletable: boolean;\n  size: number;\n};\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    flexWrap: \"wrap\",\n  } as CSSProperties, // due flexWrap is not a valid type of Modal.Styles\n};\n\nconst getReadableValue = (value: number) => {\n  return value === 0 ? \"\" : value;\n};\n\nfunction Cell({ row, column, hasBorder, value, isDeletable, size }: CellProps) {\n  Modal.setAppElement(\"#root\");\n  const { setCell, state } = useStore();\n  const [isActive, setIsActive] = useState(false);\n  const dial = [];\n\n  for (let index = 0; index < size + 1; index++) {\n    dial.push(\n      <div\n        className=\"value-input\"\n        key={index}\n        onClick={() => {\n          setCell(row, column, index);\n        }}\n      >\n        {index === 0 ? \"-\" : index}\n      </div>\n    );\n  }\n  return (\n    <div\n      className={`cell ${hasBorder ? \"border\" : \"\"} ${\n        isActive ? \"active\" : \"\"\n      } ${isDeletable ? \"\" : \"fix\"}`}\n      onClick={() => setIsActive(isDeletable && !isActive)}\n    >\n      <span className={state === GameState.NEW ? \"blur\" : \"\"}>\n        {getReadableValue(value)}\n      </span>\n      <Modal\n        isOpen={isActive}\n        onAfterClose={() => setIsActive(false)}\n        style={customStyles}\n      >\n        {dial.map((d) => d)}\n      </Modal>\n    </div>\n  );\n}\n\nexport default Cell;\n","import { CellModel } from \"../../models\";\nimport Cell from \"./Cell\";\n\ntype RowProps = {\n  index: number;\n  row: CellModel[];\n};\n\nfunction Row({ index, row }: RowProps) {\n  const cellGrid = [];\n  for (let columnIndex = 0; columnIndex < row.length; columnIndex++) {\n    const cell = (\n      <Cell\n        key={columnIndex}\n        hasBorder={isSection(columnIndex, row.length)}\n        row={index}\n        column={columnIndex}\n        size={row.length}\n        value={row[columnIndex].value}\n        isDeletable={row[columnIndex].isDeletable}\n      />\n    );\n    cellGrid.push(cell);\n  }\n  return (\n    <div className={isSection(index, row.length) ? \"row border\" : \"row\"}>\n      {cellGrid.map((c) => c)}\n    </div>\n  );\n}\n\nfunction isSection(index: number, size: number) {\n  return (index + 1) % Math.sqrt(size) === 0;\n}\n\nexport default Row;\n","import { CSSProperties, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport { useParams } from \"react-router-dom\";\n\nimport { GameDto, GameState } from \"../../models\";\nimport useStore from \"../../store\";\nimport UploadRecord from \"../upload-record\";\nimport Row from \"./Row\";\nimport axios from \"axios\";\n\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URI,\n});\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    flexWrap: \"wrap\",\n  } as CSSProperties, // due flexWrap is not a valid type of Modal.Styles\n};\n\ntype GameParam = {\n  id: string;\n};\n\nfunction Game() {\n  let { id: urlId } = useParams<GameParam>();\n  const { grid, state, setState, setGrid } = useStore();\n\n  const gameGrid = [];\n\n  useEffect(() => {\n    async function fetchGame() {\n      const { data, status } = await axiosClient.get<GameDto>(\n        `/games/${urlId}`,\n        { validateStatus: (status) => status < 500 }\n      );\n      if (status === 200) {\n        setGrid(data);\n      }\n    }\n    fetchGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [urlId]);\n\n  for (let rowIndex = 0; rowIndex < grid.length; rowIndex++) {\n    gameGrid.push(<Row key={rowIndex} index={rowIndex} row={grid[rowIndex]} />);\n  }\n  return (\n    <div className=\"grid\">\n      {gameGrid.map((row) => row)}\n      <Modal\n        isOpen={state === GameState.FINISHED}\n        onAfterClose={() => setState(GameState.EMPTY)}\n        style={customStyles}\n      >\n        <UploadRecord />\n      </Modal>\n    </div>\n  );\n}\n\nexport default Game;\n","import Game from \"./Game\";\n\nexport default Game","import useStore from \"../../store\";\nimport { toTime } from \"../../utils/timeutils\";\n\nfunction LeaderBoard() {\n  const records = useStore((store) => store.records);\n\n  return (\n    <div>\n      <h2>Leaderboard </h2>\n      {records.length ? (\n        records.map((record, i) => (\n          <div className=\"record-entry\" key={i}>\n            <h4>{i + 1}.</h4>\n            <h3>{toTime(record.score)}</h3>\n            <p>{record.userName}</p>\n          </div>\n        ))\n      ) : (\n        <div className=\"record-entry\">\n          <p>\n            <i>Nobody finished this game yet </i>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default LeaderBoard;\n","import { QueryClient, QueryClientProvider } from \"react-query\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ControlPanel from \"./components/control-panel\";\nimport Game from \"./components/game\";\nimport LeaderBoard from \"./components/leaderboard\";\n\nfunction App() {\n  const queryClient = new QueryClient();\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router>\n        <div className=\"app\">\n          <Route path=\"/:id\">\n            <Game />\n          </Route>\n          <Route exact path=\"/\">\n            <Game />\n          </Route>\n          <div className=\"left-side\">\n            <ControlPanel />\n            <LeaderBoard />\n          </div>\n        </div>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}